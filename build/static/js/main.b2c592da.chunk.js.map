{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["socket","connection","window","io","connect","transports","document","getElementById","App","appRef","useRef","goliveRef","broadcast_optionsRef","videos_containerRef","useState","channel","setChannel","startBroadcastOrJoin","current","broadcastid","session","video","value","includes","screen","audio","oneway","console","log","emit","userid","typeOfStreams","useEffect","initSocketIO","currentURL","URL","location","href","searchParams","get","style","display","parseInt","onMessageCallbacks","initRTCMultiConnection","socketURL","getExternalIceServers","onstream","event","body","appendChild","mediaElement","isInitiator","broadcastingConnection","attachStreams","push","stream","dontCaptureUserMedia","sdpConstraints","mandatory","OfferToReceiveVideo","OfferToReceiveAudio","open","dontTransmit","on","data","sender","message","broadcaster","sessionid","join","extra","close","RTCMultiConnection","openSignalingChannel","config","this","onmessage","onopen","setTimeout","send","onMediaError","error","alert","JSON","stringify","className","ref","id","onClick","title","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b2c592da.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport \"./App.css\";\n\nlet socket;\n// connect to backend server..\nsocket = window.io.connect(\"https://cryptic-atoll-80533.herokuapp.com/\", {\n  transports: [\"websocket\"]\n});\nlet connection;\n\nfunction App() {\n  const appRef = useRef();\n  const goliveRef = useRef();\n  const broadcast_optionsRef = useRef();\n  const videos_containerRef = useRef();\n  const [channel, setChannel] = useState(null);\n\n  const startBroadcastOrJoin = channel => {\n    if (!broadcast_optionsRef.current) return;\n    let broadcastid = channel;\n    connection.session = {\n      video: broadcast_optionsRef.current.value.includes(\"vid\"),\n      screen: broadcast_optionsRef.current.value.includes(\"scr\"),\n      audio: broadcast_optionsRef.current.value.includes(\"aud\"),\n      oneway: true\n    };\n    console.log(connection, connection.session, channel);\n    socket.emit(\"join-broadcast\", {\n      broadcastid: broadcastid,\n      userid: connection.userid,\n      typeOfStreams: connection.session\n    });\n  };\n\n  useEffect(() => {\n    initSocketIO();\n    // if user follows a link the hide the go live button...\n    const currentURL = new URL(window.location.href);\n    if (currentURL.searchParams.get(\"channel\")) {\n      goliveRef.current.style.display = \"none\";\n      setChannel(parseInt(currentURL.searchParams.get(\"channel\"), 10));\n      startBroadcastOrJoin(channel);\n    }\n  }, []);\n\n  // using single socket for RTCMultiConnection signaling\n  const onMessageCallbacks = {};\n\n  const initSocketIO = () => {\n    connection = initRTCMultiConnection();\n    //connection.socketURL = \"http://llocalhostt:3000/\"; https://cryptic-atoll-80533.herokuapp.com/\n    connection.socketURL = \"https://ccryptic-atoll-80533.herokuapp.comm/\";\n    // this RTCMultiConnection object is used to connect with existing users\n    connection.getExternalIceServers = false;\n    connection.onstream = function(event) {\n      console.log(\"STREAM STARTED!\");\n      connection.body.appendChild(event.mediaElement);\n      if (\n        connection.isInitiator === false &&\n        !connection.broadcastingConnection\n      ) {\n        // \"connection.broadcastingConnection\" global-level object is used\n        // instead of using a closure object, i.e. \"privateConnection\"\n        // because sometimes out of browser-specific bugs, browser\n        // can emit \"onaddstream\" event even if remote user didn't attach any stream.\n        // such bugs happen often in chrome.\n        // \"connection.broadcastingConnection\" prevents multiple initializations.\n        // if current user is broadcast viewer\n        // he should create a separate RTCMultiConnection object as well.\n        // because node.js server can allot him other viewers for\n        // remote-stream-broadcasting.\n        connection.broadcastingConnection = initRTCMultiConnection(\n          connection.userid\n        );\n        // to fix unexpected chrome/firefox bugs out of sendrecv/sendonly/etc. issues.\n        connection.broadcastingConnection.onstream = function() {};\n        connection.broadcastingConnection.session = connection.session;\n        connection.broadcastingConnection.attachStreams.push(event.stream); // broadcast remote stream\n        connection.broadcastingConnection.dontCaptureUserMedia = true;\n        // forwarder should always use this!\n        connection.broadcastingConnection.sdpConstraints.mandatory = {\n          OfferToReceiveVideo: false,\n          OfferToReceiveAudio: false\n        };\n        connection.broadcastingConnection.open({\n          dontTransmit: true\n        });\n      }\n    };\n    socket.on(\"message\", function(data) {\n      if (data.sender === connection.userid) return;\n      if (onMessageCallbacks[data.channel]) {\n        onMessageCallbacks[data.channel](data.message);\n      }\n    });\n\n    socket.on(\"join-broadcaster\", function(broadcaster, typeOfStreams) {\n      connection.session = typeOfStreams;\n      connection.channel = connection.sessionid = broadcaster.userid;\n      connection.sdpConstraints.mandatory = {\n        OfferToReceiveVideo: !!connection.session.video,\n        OfferToReceiveAudio: !!connection.session.audio\n      };\n      connection.join({\n        sessionid: broadcaster.userid,\n        userid: broadcaster.userid,\n        extra: {},\n        session: connection.session\n      });\n    });\n    // this event is emitted when a broadcast is absent.\n    socket.on(\"start-broadcasting\", function(typeOfStreams) {\n      console.log(\"BRODCAST STARTED\");\n      // host i.e. sender should always use this!\n      connection.sdpConstraints.mandatory = {\n        OfferToReceiveVideo: false,\n        OfferToReceiveAudio: false\n      };\n      connection.session = typeOfStreams;\n      connection.open({\n        dontTransmit: true\n      });\n      if (connection.broadcastingConnection) {\n        // if new person is given the initiation/host/moderation control\n        connection.broadcastingConnection.close();\n        connection.broadcastingConnection = null;\n      }\n    });\n  };\n\n  // initializing RTCMultiConnection constructor.\n  const initRTCMultiConnection = userid => {\n    var connection = new window.RTCMultiConnection();\n    console.log(\"CONNECTION\", connection);\n    connection.body = videos_containerRef.current;\n    connection.channel = connection.sessionid = connection.userid =\n      userid || connection.userid;\n    connection.sdpConstraints.mandatory = {\n      OfferToReceiveAudio: false,\n      OfferToReceiveVideo: true\n    };\n    // using socket.io for signaling\n    connection.openSignalingChannel = function(config) {\n      var channel = config.channel || this.channel;\n      onMessageCallbacks[channel] = config.onmessage;\n      if (config.onopen) setTimeout(config.onopen, 1000);\n      return {\n        send: function(message) {\n          socket.emit(\"message\", {\n            sender: connection.userid,\n            channel: channel,\n            message: message\n          });\n        },\n        channel: channel\n      };\n    };\n    connection.onMediaError = function(error) {\n      alert(JSON.stringify(error));\n    };\n    return connection;\n  };\n\n  return (\n    <div className='App' ref={appRef}>\n      <div ref={videos_containerRef} id='videos-container' />\n      <button ref={goliveRef} onClick={event => startBroadcastOrJoin(123344)}>\n        Go live\n      </button>\n      <select ref={broadcast_optionsRef} id='broadcast-options'>\n        <option value='aud/vid'>Audio+Video</option>\n        <option value='aud/scr' title='Works only in Firefox.'>\n          Audio+Screen\n        </option>\n        <option value='aud'>Audio</option>\n        <option value='vid'>Video</option>\n        <option title='Screen capturing requries HTTPs. Please run this demo on HTTPs to make sure it can capture your screens.'>\n          Screen\n        </option>\n      </select>\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}